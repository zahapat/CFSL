<#: exampledesigns/common/board_variables.ttcl :>
<: if {$flow != "Block Designer" || $selection != "PipeTest"} { ttcl_return; }:>
<: setFileName "pipe_out_check" :>
<: setFileExtension ".v" :>
<: setOutputDirectory "./exampledesign":>
<: :>
//------------------------------------------------------------------------
// pipe_out_check.v
//
// Generates pseudorandom data for Pipe Out verifications.
//
// Copyright (c) 2005-2022  Opal Kelly Incorporated
// $Rev$ $Date$
//------------------------------------------------------------------------

`timescale 1ns / 1ps
`default_nettype none

module pipe_out_check(
	input  wire            clk,
    
    // The following port definitions and interface groupings were taken from "bd_interface_template.vh" from
    // within the FrontPanel Subsystem IP's Synthesis file group. You can find this file within the "IP Sources"
    // panel. This file contains generated ports and interface groupings for each endpoint that you've requested
    // within the GUI. This enables you to copy and paste these groupings into your RTL for enabling interface
    // connection within the IPI block designer.
    (* X_INTERFACE_INFO = "opalkelly.com:interface:wirein:1.0 shared_wirein00_control EP_DATAOUT" *)
	input  wire [31:0]     wi00_ep_dataout_control,
    
    (* X_INTERFACE_INFO = "opalkelly.com:interface:wirein:1.0 wirein01_throttle_val EP_DATAOUT" *)
	input  wire [31:0]     wi01_ep_dataout_throttle_val,
    
    (* X_INTERFACE_INFO = "opalkelly.com:interface:wirein:1.0 shared_wirein03_fixed_pattern EP_DATAOUT" *)
	input  wire [31:0]     wi03_ep_dataout_fixed_pattern,
    
    (* X_INTERFACE_INFO = "opalkelly.com:interface:btpipeout:1.0 btpipeouta0_datastream_out EP_DATAIN" *)
	output reg  [31:0]     btpoa0_ep_datain_datastream_out,
    (* X_INTERFACE_INFO = "opalkelly.com:interface:btpipeout:1.0 btpipeouta0_datastream_out EP_READ" *)
	input  wire            btpoa0_ep_read_datastream_out,
    (* X_INTERFACE_INFO = "opalkelly.com:interface:btpipeout:1.0 btpipeouta0_datastream_out EP_READY" *)
	output reg             btpoa0_ep_ready_datastream_out
);


reg  [63:0]  lfsr;
reg  [31:0]  lfsr_p1;
reg  [31:0]  throttle;
reg  [15:0]  level;
wire [31:0]  pg_dout;
wire         reset;
wire         throttle_set;
wire [ 2:0]  pattern;

assign reset = wi00_ep_dataout_control[0];
assign throttle_set = wi00_ep_dataout_control[1];
assign pattern = wi00_ep_dataout_control[4:2];

pattern_gen #(
		.WIDTH    (32)
	) pg0 (
		.clk           (clk),
		.reset         (reset),
		.enable        (btpoa0_ep_read_datastream_out),
		.mode          (pattern),
		.fixed_pattern (wi03_ep_dataout_fixed_pattern),
		.dout          (pg_dout)
	);


always @(posedge clk) begin
	if (reset == 1'b1) begin
		throttle       <= wi01_ep_dataout_throttle_val;
		btpoa0_ep_ready_datastream_out <= 1'b0;
		level          <= 16'd0;
	end else begin
		if (btpoa0_ep_read_datastream_out) begin
			btpoa0_ep_datain_datastream_out <= pg_dout;
		end

		if (level >= 16'd1024) begin
			btpoa0_ep_ready_datastream_out <= 1'b1;
		end else begin
			btpoa0_ep_ready_datastream_out <= 1'b0;
		end
	
		// Update our virtual FIFO level.
		case ({btpoa0_ep_read_datastream_out, throttle[0]})
			2'b00: begin
			end
			
			// Write : Increase the FIFO level
			2'b01: begin
				if (level < 16'd65535) begin
					level <= level + 1'b1;
				end
			end
			
			// Read : Decrease the FIFO level
			2'b10: begin
				if (level > 16'd0) begin
					level <= level - 1'b1;
				end
			end
			
			// Read/Write : No net change
			2'b11: begin
			end
		endcase
	
		// The throttle is a circular register.
		// 1 enabled read or write this cycle.
		// 0 disables read or write this cycle.
		// So a single bit (0x00000001) would lead to 1/32 data rate.
		// Similarly 0xAAAAAAAA would lead to 1/2 data rate.
		if (throttle_set == 1'b1) begin
			throttle <= wi01_ep_dataout_throttle_val;
		end else begin
			throttle <= {throttle[0], throttle[31:1]};
		end
	end
end

endmodule
`default_nettype wire
