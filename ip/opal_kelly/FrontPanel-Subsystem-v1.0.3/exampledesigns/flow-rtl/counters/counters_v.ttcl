<#: exampledesigns/common/board_variables.ttcl :>
<: if {$flow != "RTL" || $selection != "Counters"} { ttcl_return; }:>
<: setFileName "counters" :>
<: setFileExtension ".v" :>
<: setOutputDirectory "./exampledesign":>
<: :>
//------------------------------------------------------------------------
// Counters.v
//
// HDL for the counters sample.  This HDL describes two counters operating
// on different board clocks and with slightly different functionality.
// The counter controls and counter values are connected to endpoints so
// that FrontPanel may control and observe them.
//
// Copyright (c) 2022
// Opal Kelly Incorporated
//------------------------------------------------------------------------

`default_nettype none
`timescale 1ns / 1ps

module Counters(
    input  wire [4:0]   okUH,
    output wire [2:0]   okHU,
    inout  wire [31:0]  okUHU,
    inout  wire         okAA,
<: if {$isXEM8350} { :>
	input  wire [4:0]   okUHs,
	output wire [2:0]   okHUs,
	inout  wire [31:0]  okUHUs,
	output wire         ok_done,
<: } :>
	input  wire         sys_clkp,
	input  wire         sys_clkn,
    
    <=:$ledDirection:>  wire [<=:$ledsMSB:>:0]   led
);

// Clock
wire sys_clk;
IBUFGDS osc_clk(.O(sys_clk), .I(sys_clkp), .IB(sys_clkn));

<: if {$isXEM8350} { :>
//-----------------------------------------------------------------------
// Primary Host Interface Counters
//-----------------------------------------------------------------------
<: } :>

// Host interface bus:
wire         okClk;
wire [112:0] okHE;
wire [64:0]  okEH;

// Endpoint connections:
wire [31:0]  wi00_ep_dataout;
wire [31:0]  wo20_ep_datain, wo21_ep_datain;
wire [31:0]  ti40_ep_trigger;
wire [31:0]  to60_ep_trigger, to61_ep_trigger;

// Counter 1:
reg  [23:0] div1;
reg         clk1div;
reg  [7:0]  count1;
reg         count1eq00;
reg         count1eq80;
wire        reset1;
wire        disable1;

// Counter 2:
reg  [23:0] div2;
reg         clk2div;
reg  [7:0]  count2;
reg         count2eqFF;
wire        reset2;
wire        up2;
wire        down2;
wire        autocount2;

// Counter 1:
assign reset1       = wi00_ep_dataout[0];
assign disable1     = wi00_ep_dataout[1];
assign autocount2   = wi00_ep_dataout[2];
assign wo20_ep_datain     = {24'd0, count1};
assign wo21_ep_datain     = {24'd0, count2};

// Counter 2:
assign reset2     = ti40_ep_trigger[0];
assign up2        = ti40_ep_trigger[1];
assign down2      = ti40_ep_trigger[2];
assign to60_ep_trigger   = {30'b0, count1eq80, count1eq00};
assign to61_ep_trigger   = {31'b0, count2eqFF};

// Counter #1
// + Counting using a divided sysclk.
// + Reset sets the counter to 0.
// + Disable turns off the counter.
always @(posedge sys_clk) begin
	div1 <= div1 - 1;
	if (div1 == 24'h000000) begin
		div1 <= 24'h400000;
		clk1div <= 1'b1;
	end else begin
		clk1div <= 1'b0;
	end
	
	if (clk1div == 1'b1) begin
		if (reset1 == 1'b1)
			count1 <= 8'h00;
		else if (disable1 == 1'b0)
			count1 <= count1 + 1;
	end

	if (count1 == 8'h00)
		count1eq00 <= 1'b1;
	else
		count1eq00 <= 1'b0;

	if (count1 == 8'h80)
		count1eq80 <= 1'b1;
	else
		count1eq80 <= 1'b0;
end


// Counter #2
// + Reset, up, and down control counter.
// + If autocount is enabled, a divided sys_clk can also
//   upcount.
always @(posedge sys_clk) begin
	div2 <= div2 - 1;
	if (div2 == 24'h000000) begin
		div2 <= 24'h100000;
		clk2div <= 1'b1;
	end else begin
		clk2div <= 1'b0;
	end
   
	if (reset2 == 1'b1)
		count2 <= 8'h00;
	else if (up2 == 1'b1)
		count2 <= count2 + 1;
	else if (down2 == 1'b1)
		count2 <= count2 - 1;
	else if ((autocount2 == 1'b1) && (clk2div == 1'b1))
		count2 <= count2 + 1;

	if (count2 == 8'hff)
		count2eqFF <= 1'b1;
	else
		count2eqFF <= 1'b0;
end

<: # Below we inline the counters associated with the second host interface :>
<: if {$isXEM8350} { :>
<#: exampledesigns/flow-rtl/counters/counters_secondary.ttcl :>
<: } :>
//-----------------------------------------------------------------------
// IP Instantiations:
//   See the "TCL" file group in the example design's Sources Panel for the
//   TCL commands used to generate the IPs instantiated in this example
//   design. This gives an example for adding the FrontPanel IPs to your
//   own project TCL build scripts.
//-----------------------------------------------------------------------
leds_counters leds_counters_inst (
<: if {$isXEM8350} { :>
  .led_in({count1_s[7:4], count1[3:0]}), // input wire [<=:$ledsMSB:> : 0] led_in
<: } else { :>
  .led_in(count1[7:<=: expr {8 - $numLEDS} :>]),  // input wire [<=:$ledsMSB:> : 0] led_in
<: } :>
  .<=:$ledNetName:>(led) // <=:$ledDirection:> wire [<=:$ledsMSB:> : 0] led_out
);

frontpanel_counters frontpanel_counters_inst (
<: if {$isXEM8350} { :>
  .okUHs(okUHs),                            // input wire [4 : 0] okUHs
  .okHUs(okHUs),                            // output wire [2 : 0] okHUs
  .okUHUs(okUHUs),                          // inout wire [31 : 0] okUHUs
  .ok_done(ok_done),                        // output wire ok_done
  .okClks(okClks),                          // output wire okClks
  .wi00_s_ep_dataout(wi00_s_ep_dataout),    // output wire [31 : 0] wi00_s_ep_dataout
  .wo20_s_ep_datain(wo20_s_ep_datain),      // input wire [31 : 0] wo20_s_ep_datain
  .wo21_s_ep_datain(wo21_s_ep_datain),      // input wire [31 : 0] wo21_s_ep_datain
  .ti40_s_ep_trigger(ti40_s_ep_trigger),    // output wire [31 : 0] ti40_s_ep_trigger
  .ti40_s_ep_clk(sys_clk),                  // input wire ti40_s_ep_clk
  .to60_s_ep_trigger(to60_s_ep_trigger),    // input wire [31 : 0] to60_s_ep_trigger
  .to60_s_ep_clk(sys_clk),                  // input wire to60_s_ep_clk
  .to61_s_ep_trigger(to61_s_ep_trigger),    // input wire [31 : 0] to61_s_ep_trigger
  .to61_s_ep_clk(sys_clk),                  // input wire to61_s_ep_clk
<: } :>
  .okUH(okUH),                              // input wire [4 : 0] okUH
  .okHU(okHU),                              // output wire [2 : 0] okHU
  .okUHU(okUHU),                            // inout wire [31 : 0] okUHU
  .okAA(okAA),                              // inout wire okAA
  .okClk(okClk),                            // output wire okClk
  .wi00_ep_dataout(wi00_ep_dataout),        // output wire [31 : 0] wi00_ep_dataout
  .wo20_ep_datain(wo20_ep_datain),          // input wire [31 : 0] wo20_ep_datain
  .wo21_ep_datain(wo21_ep_datain),          // input wire [31 : 0] wo21_ep_datain
  .ti40_ep_trigger(ti40_ep_trigger),        // output wire [31 : 0] ti40_ep_trigger
  .ti40_ep_clk(sys_clk),                    // input wire ti40_ep_clk
  .to60_ep_trigger(to60_ep_trigger),        // input wire [31 : 0] to60_ep_trigger
  .to60_ep_clk(sys_clk),                    // input wire to60_ep_clk
  .to61_ep_trigger(to61_ep_trigger),        // input wire [31 : 0] to61_ep_trigger
  .to61_ep_clk(sys_clk)                     // input wire to61_ep_clk
);

endmodule

`default_nettype wire
