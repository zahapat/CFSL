# ------------------------------------------------------------------------
# File: frontpanel_gui.tcl
#
# Do NOT modify this script.
#
# Copyright (c) 2022-2023 Opal Kelly Incorporated
# ------------------------------------------------------------------------
source_ipfile "xgui/frontpanel_utils.tcl";source_ipfile "xgui/frontpanel_generated.tcl";source_ipfile "xgui/frontpanel_struct.tcl";source_ipfile "xgui/frontpanel_params.tcl";source_ipfile "xgui/frontpanel_board.tcl";proc init_gui { IPINST PROJECT_PARAM.BOARD PARAM_VALUE.BOARD} {;variable supportedBoards;variable endpointTypes;variable secondaryEnabledBoards;variable projectBoardFile;variable projectBoardFileVersionField;variable defaultBoard;ipgui::add_param $IPINST -name Component_Name  ;set productPage [ipgui::add_page $IPINST -name productPage -display_name {Product}];set frontpanelPanel [ipgui::add_panel $IPINST -parent $productPage -name frontpanelPanel -layout vertical] ;set logo [ipgui::add_image -width 236 -height 84 -parent $frontpanelPanel -name logo $IPINST];set_property load_image "images/frontpanel-logo.png" $logo;set ipVersion [lindex [split [get_property IPDEF $IPINST] ":"] 3];set ipRevision [get_property CORE_REVISION $IPINST];ipgui::add_static_text $IPINST -name spacer -parent $frontpanelPanel -has_hypertext true -text "IP Version: <b>$ipVersion (Rev: $ipRevision)</b>";ipgui::add_static_text $IPINST -name spacer -parent $frontpanelPanel -text {------------------------------------------------------------------------------------------------------------------------------------------------------};ipgui::add_static_text $IPINST -name boardPresentText -parent $frontpanelPanel -text [returnResourcesText] -has_hypertext true;set productConfigurationGroup [ipgui::add_group $IPINST -name productConfigurationGroup -parent $productPage -display_name {Product Configuration}];set boardParam [ipgui::add_param $IPINST -name BOARD -parent $productConfigurationGroup -widget comboBox] ;set_property tooltip {Select your Opal Kelly product} $boardParam;set_property visible false $boardParam;set partNotCorrectPanel [ipgui::add_panel $IPINST -parent $productConfigurationGroup -name partNotCorrectPanel -layout vertical] ;ipgui::add_dynamic_text $IPINST -name partNotCorrectDynamicText -parent $partNotCorrectPanel  -tclproc returnBoardPartText -has_hypertext true;set_property visible false $partNotCorrectPanel;set supportedVivadoVersionPanel [ipgui::add_panel $IPINST -parent $productConfigurationGroup -name supportedVivadoVersionPanel -layout vertical] ;ipgui::add_dynamic_text $IPINST -name versionNotSupportedDynamicText -parent $supportedVivadoVersionPanel  -tclproc returnVivadoVersionText -has_hypertext true;set_property visible false $supportedVivadoVersionPanel;set boardNotSupported [ipgui::add_panel $IPINST -parent $productConfigurationGroup -name boardNotSupported -layout vertical] ;ipgui::add_static_text $IPINST -name "boardNotSupported_info" -parent ${boardNotSupported} -text "<h1>The $projectBoardFile Board File is not supported by the FrontPanel Subsystem IP.<h1/>";set_property visible false $boardNotSupported;set XEM8320Version [ipgui::add_panel $IPINST -parent $productConfigurationGroup -name XEM8320Version -layout vertical] ;ipgui::add_static_text $IPINST -name "XEM8320Version_info" -parent ${XEM8320Version} -text "<h1>This IP Core requires XEM8320-AU25P board file version v1.2 or higher. <br/>The currently enabled board file's version is: v$projectBoardFileVersionField <br/>Please download the latest version of the XEM8320-AU25P's board file.<h1/>";set_property visible false $XEM8320Version;set boardPresentPanel [ipgui::add_panel $IPINST -parent $productConfigurationGroup -name boardPresentPanel -layout vertical] ;ipgui::add_static_text $IPINST -name boardpresent_info -parent $boardPresentPanel -text "<br/>The <b>$projectBoardFile</b> Opal Kelly board file has been detected within your project. The FrontPanel Subsystem IP <br/>will be configured to use this device.<br/>";set_property visible false $boardPresentPanel;set boardPresetPanel [ipgui::add_panel $IPINST -parent $boardPresentPanel -name boardPresentPanel -layout vertical] ;ipgui::add_static_text $IPINST -name boardpreset_info -parent $boardPresetPanel -text "<br/>A custom IP preset has been detected within the $projectBoardFile's Board File. Choose to apply it below:";ipgui::add_custom_widget -parent $boardPresetPanel  -name { Apply Board File Preset } -class_name ButtonWidgetTclProcedure $IPINST;set_property visible false $boardPresetPanel;set dnaGroup [ipgui::add_group $IPINST -name dnaGroup -parent $productConfigurationGroup -display_name {Output Device DNA}];ipgui::add_static_text $IPINST -name FrontPanel_Info -parent $dnaGroup -text "<br/>The FrontPanel Subsystem utilizes the only DNA_PORT primitive on the device. The DNA_PORT primitive <br/>outputs a factory-programmed, read-only unique ID for the Xilinx device. Choose to output the DNA below:";set flashConfig [ipgui::add_param $IPINST -name DNA.EN -parent $dnaGroup] ;set_property visible false $dnaGroup;set flashConfigGroup [ipgui::add_group $IPINST -name flashConfigGroup -parent $productConfigurationGroup -display_name {Power-on FPGA Flash Config}];ipgui::add_static_text $IPINST -name FrontPanel_Info -parent $flashConfigGroup -text "<br/>This board has FPGA Flash that is connected to configuration bank 0. It can be used to store a bitfile <br/>that configures the FPGA at power-on. Using the setting below, this IP will apply the necessary BITSTREAM <br/>constraints to enable this. Bitfiles can be loaded to flash through the FrontPanel application.";set flashConfig [ipgui::add_param $IPINST -name BITSTREAM.FLASH -parent $flashConfigGroup] ;set_property visible false $flashConfigGroup;set boardDetailsGroup [ipgui::add_group $IPINST -name boardDetailsGroup -parent $productPage -display_name {Board Details}];ipgui::add_dynamic_text $IPINST -name boardDetailsDynamicText -parent $boardDetailsGroup -tclproc returnBoardDetailsText -has_hypertext true;foreach {board boardContent} $supportedBoards {;set boardDetails [lindex $boardContent 4];if {$boardDetails == ""} {;continue;};set blockDiagramImage [lindex $boardDetails 1];set boardDetailsImagesPanel$board [ipgui::add_panel $IPINST -parent $boardDetailsGroup -name boardDetailsImagesPanel$board -layout vertical];set_property visible false [set boardDetailsImagesPanel$board];set blockDiagramImageHandle [lindex $blockDiagramImage 0];set blockDiagramImageWidth [lindex $blockDiagramImage 1];set blockDiagramImageHeight [lindex $blockDiagramImage 2];ipgui::add_image $IPINST -name $board$blockDiagramImageHandle -parent [set boardDetailsImagesPanel$board] -width $blockDiagramImageWidth -height $blockDiagramImageHeight;set_property load_image $blockDiagramImageHandle [ipgui::get_imagespec $board$blockDiagramImageHandle -of $IPINST];};if { $projectBoardFile == ""} {;set_property visible true $boardParam;if {$defaultBoard eq ""} {;set_property errmsg "The FPGA Part of the currently configured Vivado project does not match any of those on any of our current board offerings. Please select the correct FPGA part for your board or utilize one of our Vivado Board Files that handle FPGA part selection for you." [ipgui::get_paramspec -name BOARD -of $IPINST] -quiet;};} elseif {(${projectBoardFile} == "XEM8320-AU25P") && ($projectBoardFileVersionField < 1.2)} {;set_property errmsg "This IP Core requires XEM8320-AU25P board file version v1.2 or higher. The currently enabled board file's version is: v$projectBoardFileVersionField. Please download the latest version of the XEM8320-AU25P's board file." [ipgui::get_paramspec -name BOARD -of $IPINST];set_property visible true $XEM8320Version;} elseif {$projectBoardFile in [dict keys $supportedBoards]} {;set_property visible true $boardPresentPanel;set boardContent [dict get $supportedBoards $projectBoardFile];set flashConfigSupported [lindex $boardContent 3];if {$flashConfigSupported == "true"} {;set_property visible true $flashConfigGroup;};if {("host_interface" in [get_board_part_interfaces]) && ([string match "*frontpanel_preset*" [get_property PRESETS [get_board_part_interfaces host_interface]]])} {;set vlnv [get_property ipdef $IPINST] ;set preset_params [board_ip_presets $vlnv "host_interface" ${PROJECT_PARAM.BOARD} "host_interface"];if {($projectBoardFile in $secondaryEnabledBoards) && ("host_interface_s" in [get_board_part_interfaces]) && ([string match "*frontpanel_preset*" [get_property PRESETS [get_board_part_interfaces host_interface_s]]])} {;append preset_params [board_ip_presets $vlnv "host_interface_s" ${PROJECT_PARAM.BOARD} "host_interface_s"];};if { $preset_params != "" } {;set_property visible true $boardPresetPanel;};};set currentToolVersion [lindex [split [version] "\n"] 0];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;set boardSupportedVersionLow [lindex [lindex $boardContent 5] 0];set boardSupportedVersionHigh [lindex [lindex $boardContent 5] 1];if {$currentToolVersionNumber < $boardSupportedVersionLow || $boardSupportedVersionHigh <= $currentToolVersionNumber} {;set_property visible true $supportedVivadoVersionPanel;set_property errmsg "The Vivado version being used (v$currentToolVersionNumber) is not compatible with the ${projectBoardFile}. Please use a Vivado version between \[v$boardSupportedVersionLow, v$boardSupportedVersionHigh)" [ipgui::get_paramspec -name BOARD -of $IPINST] -quiet;};} else {;set_property visible true $boardNotSupported;set_property errmsg "The $projectBoardFile Board File is not supported by the FrontPanel Subsystem IP." [ipgui::get_paramspec -name BOARD -of $IPINST] -quiet;};set spacerWidthLockPanel [ipgui::add_panel $IPINST -parent $productPage -name spacerWidthLockPanel -layout vertical] ;set spacerWidthLockImage [ipgui::add_image -width 1100 -height 0 -parent $spacerWidthLockPanel -name spacerWidthLockImage $IPINST];set endpointsPage [ipgui::add_page $IPINST -name endpointsPage -display_name {Endpoints}];set endpointsGroup [ipgui::add_group $IPINST -name endpointsGroup -parent $endpointsPage -display_name {Endpoints}];set endpointsHorizontalPanel [ipgui::add_panel $IPINST -parent $endpointsGroup -name endpointsHorizontalPanel -layout horizontal] ;set countVerticalPanel [ipgui::add_panel $IPINST -parent $endpointsHorizontalPanel -name countVerticalPanel -layout vertical] ;ipgui::add_static_text $IPINST -name addressingInfoText -parent $countVerticalPanel -text {In the entries provided below, please define the number of<br/>endpoints required for each endpoint type:};foreach type $endpointTypes {;set $type.COUNT [ipgui::add_param $IPINST -name $type.COUNT -parent $countVerticalPanel];};set RB.EN [ipgui::add_param $IPINST -name RB.EN -parent $countVerticalPanel];set_property tooltip {Number of WireIn Endpoints} ${WI.COUNT};set_property tooltip {Number of WireOut Endpoints} ${WO.COUNT};set_property tooltip {Number of TriggerIn Endpoints} ${TI.COUNT};set_property tooltip {Number of TriggerOut Endpoints} ${TO.COUNT};set_property tooltip {Number of PipeIn Endpoints} ${PI.COUNT};set_property tooltip {Number of BTPipeIn Endpoints} ${BTPI.COUNT};set_property tooltip {Number of PipeOut Endpoints} ${PO.COUNT};set_property tooltip {Number of BTPipeOut Endpoints} ${BTPO.COUNT};set_property tooltip {Enable Register Bridge} ${RB.EN};set addressPanel [ipgui::add_panel $IPINST -parent $endpointsHorizontalPanel -name addressPanel -layout vertical];ipgui::add_static_text $IPINST -name addressingInfoText -parent $addressPanel -text {When you request endpoints on the<br/>left, undefined endpoints (0xff) will<br/>appear to the right. Referencing the<br/>table, assign a unique hex address to<br/>each endpoint by type. Ensure valid<br/>addresses; issues prompt warnings.<br/>Resolve all warnings to generate the<br/>IP Core.};set leftAlignPanel [ipgui::add_panel $IPINST -parent $addressPanel -name leftAlignPanel -layout horizontal] ;set addressTable [ipgui::add_table $IPINST  -name addressTable -rows "10" -columns "2" -parent $leftAlignPanel];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name typeHeader -parent $addressTable -text "<b>Endpoint Type</b>"];set_property cell_location "0,1,1,1" [ipgui::add_static_text  $IPINST -name rangeHeader -parent  $addressTable -text "<b>Address Range</b>"];set_property cell_location "2,0" [ipgui::add_static_text  $IPINST -name wireInText -parent  $addressTable -text "Wire In"];set_property cell_location "3,0" [ipgui::add_static_text  $IPINST -name wireOutText -parent  $addressTable -text "Wire Out"];set_property cell_location "4,0" [ipgui::add_static_text  $IPINST -name triggerInText -parent  $addressTable -text "Trigger In"];set_property cell_location "5,0" [ipgui::add_static_text  $IPINST -name triggerOutText -parent  $addressTable -text "Trigger Out"];set_property cell_location "6,0" [ipgui::add_static_text  $IPINST -name pipeInText -parent  $addressTable -text "Pipe In"];set_property cell_location "7,0" [ipgui::add_static_text  $IPINST -name btPipeInText -parent  $addressTable -text "BTPipe In"];set_property cell_location "8,0" [ipgui::add_static_text  $IPINST -name pipeOutText -parent  $addressTable -text "Pipe Out"];set_property cell_location "9,0" [ipgui::add_static_text  $IPINST -name btPipeOutText -parent  $addressTable -text "BTPipe Out"];set_property cell_location "2,1" [ipgui::add_static_text  $IPINST -name wireInRange -parent  $addressTable -text "0x00 - 0x1F"];set_property cell_location "3,1" [ipgui::add_static_text  $IPINST -name wireOutRange -parent  $addressTable -text "0x20 - 0x3F"];set_property cell_location "4,1" [ipgui::add_static_text  $IPINST -name triggerInRange -parent  $addressTable -text "0x40 - 0x5F"];set_property cell_location "5,1" [ipgui::add_static_text  $IPINST -name triggerOutRange -parent  $addressTable -text "0x60 - 0x7F"];set_property cell_location "6,1" [ipgui::add_static_text  $IPINST -name pipeInRange -parent  $addressTable -text "0x80 - 0x9F"];set_property cell_location "7,1" [ipgui::add_static_text  $IPINST -name pipeOutRange -parent  $addressTable -text "0x80 - 0x9F"];set_property cell_location "8,1" [ipgui::add_static_text  $IPINST -name btPipeInRange -parent  $addressTable -text "0xA0 - 0xBF"];set_property cell_location "9,1" [ipgui::add_static_text  $IPINST -name btPipeOutRange -parent  $addressTable -text "0xA0 - 0xBF"];ipgui::add_static_text  $IPINST -name leftAlignText -parent  $leftAlignPanel -text "";set tablesHorizontalPanel [ipgui::add_panel $IPINST -parent $endpointsHorizontalPanel -name tablesHorizontalPanel -layout horizontal];foreach type $endpointTypes {;set [set type]_table [ipgui::add_table $IPINST  -name [set type]_table -rows "34" -columns "1" -parent $tablesHorizontalPanel];set address_index 0;for {set i 2} {$i <= 33} {incr i} {;set_property cell_location "$i,0" [ipgui::add_param $IPINST -name $type.ADDR_$address_index -parent [set [set type]_table]];incr address_index;};};set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent  $WI_table -text "<b>WireIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $WO_table -text "<b>WireOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $TI_table -text "<b>TriggerIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $TO_table -text "<b>TriggerOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $PI_table -text "<b>PipeIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $BTPI_table -text "<b>BTPipeIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $PO_table -text "<b>PipeOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent $BTPO_table -text "<b>BTPipeOut</b>"];set secondaryEndpointsPage [ipgui::add_page $IPINST -name secondaryEndpointsPage -display_name {Secondary Endpoints}];set endpointsSecondaryGroup [ipgui::add_group $IPINST -name endpointsSecondaryGroup -parent $secondaryEndpointsPage -display_name {EndPoints for Secondary Interface}];set S.EN [ipgui::add_param $IPINST -name S.EN -parent $endpointsSecondaryGroup];set_property tooltip {Enable secondary host interface} ${S.EN};set endpointsSecondaryHorizontalPanel [ipgui::add_panel $IPINST -parent $endpointsSecondaryGroup -name endpointsSecondaryHorizontalPanel -layout horizontal] ;set countSecondaryVerticalPanel [ipgui::add_panel $IPINST -parent $endpointsSecondaryHorizontalPanel -name countSecondaryVerticalPanel -layout vertical];ipgui::add_static_text $IPINST -name addressingInfoText -parent $countSecondaryVerticalPanel -text {In the entries provided below, please define the number of<br/>endpoints required for each endpoint type:};foreach type $endpointTypes {;set S.$type.COUNT [ipgui::add_param $IPINST -name S.$type.COUNT -parent $countSecondaryVerticalPanel];};set S.RB.EN [ipgui::add_param $IPINST -name S.RB.EN -parent $countSecondaryVerticalPanel];set_property tooltip {Number of WireIn Endpoints} ${S.WI.COUNT};set_property tooltip {Number of WireOut Endpoints} ${S.WO.COUNT};set_property tooltip {Number of TriggerIn Endpoints} ${S.TI.COUNT};set_property tooltip {Number of TriggerOut Endpoints} ${S.TO.COUNT};set_property tooltip {Number of PipeIn Endpoints} ${S.PI.COUNT};set_property tooltip {Number of BTPipeIn Endpoints} ${S.BTPI.COUNT};set_property tooltip {Number of PipeOut Endpoints} ${S.PO.COUNT};set_property tooltip {Number of BTPipeOut Endpoints} ${S.BTPO.COUNT};set_property tooltip {Enable Register Bridge} ${S.RB.EN};set addressPanel [ipgui::add_panel $IPINST -parent $endpointsSecondaryHorizontalPanel -name addressPanel -layout vertical];ipgui::add_static_text $IPINST -name addressingInfoText -parent $addressPanel -text {When you request endpoints on the<br/>left, undefined endpoints (0xff) will<br/>appear to the right. Referencing the<br/>table, assign a unique hex address to<br/>each endpoint by type. Ensure valid<br/>addresses; issues prompt warnings.<br/>Resolve all warnings to generate the<br/>IP Core.};set leftAlignPanel [ipgui::add_panel $IPINST -parent $addressPanel -name leftAlignPanel -layout horizontal] ;set addressTable [ipgui::add_table $IPINST  -name addressTable -rows "10" -columns "2" -parent $leftAlignPanel];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name typeHeader -parent $addressTable -text "<b>Endpoint Type</b>"];set_property cell_location "0,1,1,1" [ipgui::add_static_text  $IPINST -name rangeHeader -parent  $addressTable -text "<b>Address Range</b>"];set_property cell_location "2,0" [ipgui::add_static_text  $IPINST -name wireInText -parent  $addressTable -text "Wire In"];set_property cell_location "3,0" [ipgui::add_static_text  $IPINST -name wireOutText -parent  $addressTable -text "Wire Out"];set_property cell_location "4,0" [ipgui::add_static_text  $IPINST -name triggerInText -parent  $addressTable -text "Trigger In"];set_property cell_location "5,0" [ipgui::add_static_text  $IPINST -name triggerOutText -parent  $addressTable -text "Trigger Out"];set_property cell_location "6,0" [ipgui::add_static_text  $IPINST -name pipeInText -parent  $addressTable -text "Pipe In"];set_property cell_location "7,0" [ipgui::add_static_text  $IPINST -name btPipeInText -parent  $addressTable -text "BTPipe In"];set_property cell_location "8,0" [ipgui::add_static_text  $IPINST -name pipeOutText -parent  $addressTable -text "Pipe Out"];set_property cell_location "9,0" [ipgui::add_static_text  $IPINST -name btPipeOutText -parent  $addressTable -text "BTPipe Out"];set_property cell_location "2,1" [ipgui::add_static_text  $IPINST -name wireInRange -parent  $addressTable -text "0x00 - 0x1F"];set_property cell_location "3,1" [ipgui::add_static_text  $IPINST -name wireOutRange -parent  $addressTable -text "0x20 - 0x3F"];set_property cell_location "4,1" [ipgui::add_static_text  $IPINST -name triggerInRange -parent  $addressTable -text "0x40 - 0x5F"];set_property cell_location "5,1" [ipgui::add_static_text  $IPINST -name triggerOutRange -parent  $addressTable -text "0x60 - 0x7F"];set_property cell_location "6,1" [ipgui::add_static_text  $IPINST -name pipeInRange -parent  $addressTable -text "0x80 - 0x9F"];set_property cell_location "7,1" [ipgui::add_static_text  $IPINST -name pipeOutRange -parent  $addressTable -text "0x80 - 0x9F"];set_property cell_location "8,1" [ipgui::add_static_text  $IPINST -name btPipeInRange -parent  $addressTable -text "0xA0 - 0xBF"];set_property cell_location "9,1" [ipgui::add_static_text  $IPINST -name btPipeOutRange -parent  $addressTable -text "0xA0 - 0xBF"];ipgui::add_static_text  $IPINST -name leftAlignText -parent  $leftAlignPanel -text "";set tablesSecondaryHorizontalPanel [ipgui::add_panel $IPINST -parent $endpointsSecondaryHorizontalPanel -name tablesSecondaryHorizontalPanel -layout horizontal];foreach type $endpointTypes {;set S.[set type]_table [ipgui::add_table $IPINST  -name S.[set type]_table -rows "34" -columns "1" -parent $tablesSecondaryHorizontalPanel];set address_index 0;for {set i 2} {$i <= 33} {incr i} {;set_property cell_location "$i,0" [ipgui::add_param $IPINST -name S.$type.ADDR_$address_index -parent [set S.[set type]_table]];incr address_index;};};set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent  ${S.WI_table} -text "<b>WireIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.WO_table} -text "<b>WireOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.TI_table} -text "<b>TriggerIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.TO_table} -text "<b>TriggerOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.PI_table} -text "<b>PipeIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.BTPI_table} -text "<b>BTPipeIn</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.PO_table} -text "<b>PipeOut</b>"];set_property cell_location "0,0,1,0" [ipgui::add_static_text  $IPINST -name addressHeader -parent ${S.BTPO_table} -text "<b>BTPipeOut</b>"];variable simulationExampleDesigns;set exampleDesignsPage [ipgui::add_page $IPINST -name exampleDesignsPage -display_name {Example Designs}];set infoGroup [ipgui::add_group $IPINST -name infoGroup -parent $exampleDesignsPage -display_name {Info}];ipgui::add_static_text $IPINST -name infoText -parent $infoGroup -text {To open the example design, right click on the IP after exiting this GUI and select <b><i>Open IP Example Design</i></b>};set configGroup [ipgui::add_group $IPINST -name configGroup -parent $exampleDesignsPage -display_name {Config}];ipgui::add_param $IPINST -name EXDES.FLOW -parent $configGroup -widget comboBox;ipgui::add_param $IPINST -name EXDES.SELECTION -parent $configGroup -widget comboBox;set exampleDesignInfoGroup [ipgui::add_group $IPINST -parent $exampleDesignsPage -name exampleDesignInfoGroup -layout vertical -display_name {Example Design Overview}];ipgui::add_dynamic_text $IPINST -name exampleDesignInfoDynamicText -parent $exampleDesignInfoGroup  -tclproc update_gui_for_PARAM_VALUE.EXDES.SELECTION -has_hypertext true;foreach {board boardContent} $supportedBoards {;set imagesPanel$board [ipgui::add_panel $IPINST -parent $exampleDesignInfoGroup -name imagesPanel$board -layout vertical];set_property visible false [set imagesPanel$board];set exampleDesigns_bd [lindex $boardContent 1];set exampleDesigns_rtl [lindex $boardContent 2];set exampleTypes {bd rtl};foreach type $exampleTypes {;foreach exampleDesign [set exampleDesigns_$type] {;set exampleDesignName [lindex $exampleDesign 0];set exampleDesignImage [lindex $exampleDesign 2];if {[llength $exampleDesignImage] == 0} {;continue;};set exampleDesignImageHandle [lindex $exampleDesignImage 0];set exampleDesignImageWidth [lindex $exampleDesignImage 1];set exampleDesignImageHeight [lindex $exampleDesignImage 2];ipgui::add_image $IPINST -name $type$board$exampleDesignName$exampleDesignImageHandle -parent [set imagesPanel$board] -width $exampleDesignImageWidth -height $exampleDesignImageHeight;set_property load_image $exampleDesignImageHandle [ipgui::get_imagespec $type$board$exampleDesignName$exampleDesignImageHandle -of $IPINST];set_property visible false [ipgui::get_imagespec $type$board$exampleDesignName$exampleDesignImageHandle -of $IPINST];};};};foreach exampleDesign $simulationExampleDesigns {;set exampleDesignName [lindex $exampleDesign 0];set exampleDesignImage [lindex $exampleDesign 2];if {[llength $exampleDesignImage] == 0} {;continue;};set exampleDesignImageHandle [lindex $exampleDesignImage 0];set exampleDesignImageWidth [lindex $exampleDesignImage 1];set exampleDesignImageHeight [lindex $exampleDesignImage 2];ipgui::add_image $IPINST -name simulation$exampleDesignName$exampleDesignImageHandle -parent $exampleDesignInfoGroup -width $exampleDesignImageWidth -height $exampleDesignImageHeight;set_property load_image $exampleDesignImageHandle [ipgui::get_imagespec simulation$exampleDesignName$exampleDesignImageHandle -of $IPINST];set_property visible false [ipgui::get_imagespec simulation$exampleDesignName$exampleDesignImageHandle -of $IPINST];};};proc update_gui_for_PARAM_VALUE.BOARD {IPINST PARAM_VALUE.BOARD PROJECT_PARAM.PART} {;variable supportedBoards;variable secondaryEnabledBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set projectPart ${PROJECT_PARAM.PART};set_property visible false [ipgui::get_pagespec secondaryEndpointsPage -of $IPINST];set_property visible false [ipgui::get_pagespec exampleDesignsPage -of $IPINST];set_property visible false [ipgui::get_pagespec endpointsPage -of $IPINST];set_property visible false [ipgui::get_panelspec partNotCorrectPanel -of $IPINST];set_property visible false [ipgui::get_panelspec supportedVivadoVersionPanel -of $IPINST];set_property visible false [ipgui::get_groupspec flashConfigGroup -of $IPINST];set_property visible false [ipgui::get_groupspec boardDetailsGroup -of $IPINST];set_property visible false [ipgui::get_groupspec dnaGroup -of $IPINST];foreach {board boardContent} $supportedBoards {;set boardDetails [lindex $boardContent 4];if {$boardDetails == ""} {;continue;};set_property visible false [ipgui::get_panelspec boardDetailsImagesPanel$board -of $IPINST];};if {[baselineErrorChecking]} {;return;};set boardContent [dict get $supportedBoards $productDropDownValue];set_property visible true [ipgui::get_pagespec endpointsPage -of $IPINST];set_property visible true [ipgui::get_pagespec exampleDesignsPage -of $IPINST];set_property visible true [ipgui::get_groupspec dnaGroup -of $IPINST];set boardDetails [lindex $boardContent 4];if {$boardDetails != ""} {;set_property visible true [ipgui::get_groupspec boardDetailsGroup -of $IPINST];set boardBlockImage [lindex $boardDetails 1];if {$boardBlockImage != ""} {;set_property visible true [ipgui::get_panelspec boardDetailsImagesPanel$productDropDownValue -of $IPINST];};};if {$productDropDownValue in $secondaryEnabledBoards} {;set_property visible true [ipgui::get_pagespec secondaryEndpointsPage -of $IPINST];};set flashConfigSupported [lindex $boardContent 3];if {$flashConfigSupported == "true"} {;set_property visible true [ipgui::get_groupspec flashConfigGroup -of $IPINST];};if {$projectPart != [lindex $boardContent 0]} {;set_property visible true [ipgui::get_panelspec partNotCorrectPanel -of $IPINST];};set currentToolVersion [lindex [split [version] "\n"] 0];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;set boardSupportedVersionLow [lindex [lindex $boardContent 5] 0];set boardSupportedVersionHigh [lindex [lindex $boardContent 5] 1];if {$currentToolVersionNumber < $boardSupportedVersionLow || $boardSupportedVersionHigh <= $currentToolVersionNumber} {;set_property visible true [ipgui::get_panelspec supportedVivadoVersionPanel -of $IPINST];};};proc returnBoardPartText {PARAM_VALUE.BOARD} {;if {[baselineErrorChecking]} {;return "Not supported";};variable supportedBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set boardFPGAPart [lindex $boardContent 0];return "<b>NOTICE</b> - Project is not configured with the correct FPGA part for this board. Please create a new project with <br/>the following FPGA part: <b>$boardFPGAPart</b>";};proc returnVivadoVersionText {PARAM_VALUE.BOARD} {;if {[baselineErrorChecking]} {;return "Not supported";};variable supportedBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set boardSupportedVersionLow [lindex [lindex $boardContent 5] 0];set boardSupportedVersionHigh [lindex [lindex $boardContent 5] 1];set currentToolVersion [lindex [split [version] "\n"] 0];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;return "<b>NOTICE</b> - The Vivado version being used (<b>v$currentToolVersionNumber</b>) is not compatible with the ${productDropDownValue}. Please use a Vivado version between \[<b>v$boardSupportedVersionLow, v$boardSupportedVersionHigh</b>)";};proc returnBoardDetailsText {PARAM_VALUE.BOARD} {;if {[baselineErrorChecking]} {;return "Not supported";};variable supportedBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set boardDetails [lindex $boardContent 4];if {$boardDetails != ""} {;set productPageLink [lindex $boardDetails 0];return "For Full List of Features & Specifications: <html> <a href = \"$productPageLink\">$productDropDownValue's Product Page</a><br/><br/>$productDropDownValue's Block Diagram:<br/><br/></html>";};};proc update_gui_for_PARAM_VALUE.EXDES.SELECTION {IPINST PARAM_VALUE.BOARD PARAM_VALUE.EXDES.SELECTION PARAM_VALUE.EXDES.FLOW PROJECT_PARAM.BOARD} {;variable supportedBoards;variable simulationExampleDesigns;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set exampleDesignDropDown ${PARAM_VALUE.EXDES.SELECTION};set exampleDesignDropDownValue [get_property value ${exampleDesignDropDown}];set flowDropDown ${PARAM_VALUE.EXDES.FLOW};set flowDropDownValue [get_property value ${flowDropDown}];set text "Example Design not supported";foreach {board boardContent} $supportedBoards {;if {$productDropDownValue == $board} {;set_property visible true [ipgui::get_panelspec imagesPanel$board -of $IPINST];} else {;set_property visible false [ipgui::get_panelspec imagesPanel$board -of $IPINST];continue;};set exampleDesigns_bd [lindex $boardContent 1];set exampleDesigns_rtl [lindex $boardContent 2];set flowCompareText_bd "Block Designer";set flowCompareText_rtl "RTL";set exampleTypes {rtl bd};foreach type $exampleTypes {;foreach exampleDesign [set exampleDesigns_$type] {;set exampleDesignName [lindex $exampleDesign 0];set exampleDesignImage [lindex $exampleDesign 2];set exampleDesignImageHandle [lindex $exampleDesignImage 0];if {$flowDropDownValue == [set flowCompareText_$type] && $exampleDesignDropDownValue == $exampleDesignName} {;set textReturnFunction [lindex $exampleDesign 1];set text [[set textReturnFunction]];if {[llength $exampleDesignImage] == 0} {;continue;};set_property visible true [ipgui::get_imagespec $type$board$exampleDesignName$exampleDesignImageHandle -of $IPINST];} else {;if {[llength $exampleDesignImage] == 0} {;continue;};set_property visible false [ipgui::get_imagespec $type$board$exampleDesignName$exampleDesignImageHandle -of $IPINST];};};};};foreach exampleDesign $simulationExampleDesigns {;set exampleDesignName [lindex $exampleDesign 0];set exampleDesignImage [lindex $exampleDesign 2];set exampleDesignImageHandle [lindex $exampleDesignImage 0];if {$flowDropDownValue == "Simulation" && $exampleDesignDropDownValue == $exampleDesignName} {;set textReturnFunction [lindex $exampleDesign 1];set text [[set textReturnFunction]];if {[llength $exampleDesignImage] == 0} {;continue;};set_property visible true [ipgui::get_imagespec simulation$exampleDesignName$exampleDesignImageHandle -of $IPINST];} else {;if {[llength $exampleDesignImage] == 0} {;continue;};set_property visible false [ipgui::get_imagespec simulation$exampleDesignName$exampleDesignImageHandle -of $IPINST];};};return $text;};proc update_gui_for_PARAM_VALUE.S.EN {IPINST PARAM_VALUE.S.EN} {;set enable ${PARAM_VALUE.S.EN};set enableValue [get_property value ${enable}];if {$enableValue == true} {;set_property visible true [ipgui::get_panelspec endpointsSecondaryHorizontalPanel -of $IPINST];} else {;set_property visible false [ipgui::get_panelspec endpointsSecondaryHorizontalPanel -of $IPINST];};};
