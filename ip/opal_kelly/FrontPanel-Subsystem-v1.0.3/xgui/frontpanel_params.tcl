# ------------------------------------------------------------------------
# File: frontpanel_params.tcl
#
# Do NOT modify this script.
#
# Copyright (c) 2022-2023 Opal Kelly Incorporated
# ------------------------------------------------------------------------
set projectBoardFileIdentifier [::ipxit::get_project_property BOARD];set projectBoardFileNameField [lindex [split $projectBoardFileIdentifier :] 1];set projectBoardFileVersionField [lindex [split $projectBoardFileIdentifier :] 3];set projectBoardFile [regsub {_.*} [string toupper $projectBoardFileNameField] ""];set defaultBoard "";proc baselineErrorChecking {} {;variable projectBoardFile;variable supportedBoards;set requestedBoard [get_parameter_property "BOARD"];set check_1 [expr {$projectBoardFile != "" && !($projectBoardFile in [dict keys $supportedBoards])}];set check_2 [expr {$projectBoardFile != "" && $requestedBoard != $projectBoardFile}];if {$check_1 || $check_2} {;return true;} else {;return false;};};set procedure_Init {;proc init_params { IPINST PROJECT_PARAM.PART PARAM_VALUE.host_interface_s_BOARD_INTERFACE PARAM_VALUE.GUI.APPLY_PRESET PARAM_VALUE.EXDES.FLOW PARAM_VALUE.BOARD PARAM_VALUE.EXDES.SELECTION <<Arguments>>} {      ;set_property preset_proc "host_interface_s_BOARD_INTERFACE_PRESET" ${PARAM_VALUE.host_interface_s_BOARD_INTERFACE};set_property preset_proc "APPLY_BOARD_FILE_PRESET_PROC" ${PARAM_VALUE.GUI.APPLY_PRESET};variable endpointTypes;variable supportedBoards;variable simulationExampleDesigns;variable projectBoardFile;variable defaultBoard;set productDropDown ${PARAM_VALUE.BOARD};set_property range [returnSupportedBoards] $productDropDown;if {$projectBoardFile != "" && $projectBoardFile in [dict keys $supportedBoards]} {;set_property value $projectBoardFile $productDropDown;} else {;set projectPart ${PROJECT_PARAM.PART};foreach {key value} $supportedBoards {;set fpgaPartNumber [lindex $value 0];if {$fpgaPartNumber == $projectPart} {;set defaultBoard $key;break;};};if {$defaultBoard ne ""} {;set_property value $defaultBoard ${PARAM_VALUE.BOARD};};};if {[baselineErrorChecking]} {;return;};foreach type $endpointTypes {;variable lastCount_$type;variable lastCount_S.$type;set lastCount_$type [get_property value [set PARAM_VALUE.$type.COUNT]];set lastCount_S.$type [get_property value [set PARAM_VALUE.S.$type.COUNT]];for {set i 0} {$i < 32} {incr i} {;updateStoredAddressTable $type $i PARAM_VALUE.$type.ADDR_$i;updateStoredAddressTable S.$type $i PARAM_VALUE.S.$type.ADDR_$i;};};set flowDropDown ${PARAM_VALUE.EXDES.FLOW};set productDropDownValue [get_property value $productDropDown];set boardContent [dict get $supportedBoards $productDropDownValue];set blockDesignerExampleDesigns [lindex $boardContent 1];set RTLExampleDesigns [lindex $boardContent 2];if {([llength $blockDesignerExampleDesigns] == 0) && ([llength $RTLExampleDesigns] == 0)} {;set_property range "Simulation" $flowDropDown;} elseif {[llength $blockDesignerExampleDesigns] == 0} {;set_property range "RTL,Simulation" $flowDropDown;} elseif {[llength $RTLExampleDesigns] == 0} {;set_property range "Block Designer,Simulation" $flowDropDown;}        ;set flowDropDownValue [get_property value $flowDropDown];set exampleDesignDropDown ${PARAM_VALUE.EXDES.SELECTION};if {$flowDropDownValue == "Block Designer"} {;set supportedExampleDesigns "";foreach exampleDesign $blockDesignerExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;} elseif {$flowDropDownValue == "RTL"} {;set supportedExampleDesigns "";foreach exampleDesign $RTLExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;} elseif {$flowDropDownValue == "Simulation"} {;set supportedExampleDesigns "";foreach exampleDesign $simulationExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;};};};set addressArgs {};foreach type $endpointTypes {;lappend addressArgs PARAM_VALUE.$type.COUNT;lappend addressArgs PARAM_VALUE.S.$type.COUNT;for {set i 0} {$i < 32} {incr i} {;lappend addressArgs PARAM_VALUE.$type.ADDR_$i;lappend addressArgs PARAM_VALUE.S.$type.ADDR_$i;};};set subArguments [regsub -all "<<Arguments>>" $procedure_Init $addressArgs];uplevel 0 $subArguments;proc update_PARAM_VALUE.BOARD {PARAM_VALUE.BOARD PROJECT_PARAM.BOARD} {;set currentToolVersion [lindex [split [version] "\n"] 0];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;variable supportedBoards;variable defaultBoard;variable projectBoardFile;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];if {$defaultBoard eq "" && $projectBoardFile == ""} {;set_property errmsg "The FPGA Part of the currently configured Vivado project does not match any of those on any of our current board offerings. Please select the correct FPGA part for your board or utilize one of our Vivado Board Files that handle FPGA part selection for you. $defaultBoard" $productDropDown  -quiet;return false;};set boardContent [dict get $supportedBoards $productDropDownValue];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;set boardSupportedVersionLow [lindex [lindex $boardContent 5] 0];set boardSupportedVersionHigh [lindex [lindex $boardContent 5] 1];if {$currentToolVersionNumber < $boardSupportedVersionLow || $boardSupportedVersionHigh <= $currentToolVersionNumber} {;set_property errmsg "The Vivado version being used (v$currentToolVersionNumber) is not compatible with the ${productDropDownValue}. Please use a Vivado version between \[v$boardSupportedVersionLow, v$boardSupportedVersionHigh)" $productDropDown -quiet;};variable projectBoardFile;variable projectBoardFileVersionField;if {(${projectBoardFile} == "XEM8320-AU25P") && ($projectBoardFileVersionField < 1.2)} {;set_property errmsg "This IP Core requires XEM8320-AU25P board file version v1.2 or higher. The currently enabled board file's version is: v$projectBoardFileVersionField. Please download the latest version of the XEM8320-AU25P's board file." $productDropDown -quiet;return false;};};proc validate_PARAM_VALUE.BOARD {PARAM_VALUE.BOARD} {;variable supportedBoards;variable projectBoardFile;variable defaultBoard;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set projectPart [::ipxit::get_project_property PART];set projectBoard [::ipxit::get_project_property BOARD]    ;if {${projectBoard} != "" && !($projectBoardFile in [dict keys $supportedBoards])} {;set_property errmsg "The \"$projectBoardFile\" board file is NOT supported by the FrontPanel Subsystem IP. Please configure your Vivado project with a compatible board file." $productDropDown;return false;};if {${projectBoard} != "" && $projectBoardFile != $productDropDownValue} {;set_property errmsg "The project's board file is: \"$projectBoardFile\". This is NOT equal to the requested board: \"$productDropDownValue\". Please configure your Vivado project with the correct board file." $productDropDown;return false;};set boardContent [dict get $supportedBoards $productDropDownValue];set boardPart [lindex $boardContent 0];if {$projectPart != $boardPart} {;set_property errmsg "The project's FPGA Part is: \"$projectPart\". This is NOT equal to the requested $productDropDownValue's FPGA Part of: \"$boardPart\". Please change your project's FPGA Part to the $productDropDownValue's onboard \"$boardPart\" FPGA." $productDropDown;};set currentToolVersion [lindex [split [version] "\n"] 0];regexp {v([0-9]+[^\s]+)} $currentToolVersion -> currentToolVersionNumber;set boardSupportedVersionLow [lindex [lindex $boardContent 5] 0];set boardSupportedVersionHigh [lindex [lindex $boardContent 5] 1];if {$currentToolVersionNumber < $boardSupportedVersionLow || $boardSupportedVersionHigh < $currentToolVersionNumber} {;set_property errmsg "The Vivado version being used (v$currentToolVersionNumber) is not compatible with the ${productDropDownValue}. Please use a Vivado version between \[v$boardSupportedVersionLow, v$boardSupportedVersionHigh)" $productDropDown;};if {$defaultBoard eq "" && $projectBoardFile == ""} {;set_property errmsg "The FPGA Part of the currently configured Vivado project does not match any of those on any of our current board offerings. Please select the correct FPGA part for your board or utilize one of our Vivado Board Files that handle FPGA part selection for you. $defaultBoard" $productDropDown;};return true;};proc update_PARAM_VALUE.EXDES.SELECTION {PARAM_VALUE.EXDES.SELECTION PARAM_VALUE.BOARD PARAM_VALUE.EXDES.FLOW} {;if {[baselineErrorChecking]} {;return;};variable supportedBoards;variable simulationExampleDesigns;set exampleDesignDropDown ${PARAM_VALUE.EXDES.SELECTION};set flowDropDown ${PARAM_VALUE.EXDES.FLOW};set flowDropDownValue [get_property value ${flowDropDown}];set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set blockDesignerExampleDesigns [lindex $boardContent 1];set RTLExampleDesigns [lindex $boardContent 2];set supportedExampleDesigns "No Example Designs";set_property range "$supportedExampleDesigns" $exampleDesignDropDown;if {$flowDropDownValue == "Block Designer"} {;set supportedExampleDesigns "";foreach exampleDesign $blockDesignerExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;} elseif {$flowDropDownValue == "RTL"} {;set supportedExampleDesigns "";foreach exampleDesign $RTLExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;} elseif {$flowDropDownValue == "Simulation"} {;set supportedExampleDesigns "";foreach exampleDesign $simulationExampleDesigns {;append supportedExampleDesigns "," [lindex $exampleDesign 0];};set_property range "$supportedExampleDesigns" $exampleDesignDropDown ;};};proc update_PARAM_VALUE.EXDES.FLOW {PARAM_VALUE.EXDES.FLOW PARAM_VALUE.BOARD} {;if {[baselineErrorChecking]} {;return;};variable supportedBoards;set flowDropDown ${PARAM_VALUE.EXDES.FLOW};set flowDropDownValue [get_property value ${flowDropDown}];set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set blockDesignerExampleDesigns [lindex $boardContent 1];set RTLExampleDesigns [lindex $boardContent 2];set_property range "Block Designer,RTL,Simulation" $flowDropDown;if {([llength $blockDesignerExampleDesigns] == 0) && ([llength $RTLExampleDesigns] == 0)} {;set_property range "Simulation" $flowDropDown;} elseif {[llength $blockDesignerExampleDesigns] == 0} {;set_property range "RTL,Simulation" $flowDropDown;} elseif {[llength $RTLExampleDesigns] == 0} {;set_property range "Block Designer,Simulation" $flowDropDown;}  ;};proc update_PARAM_VALUE.DNA.WIDTH { PARAM_VALUE.DNA.WIDTH PARAM_VALUE.BOARD PROJECT_PARAM.BOARD } {;if {[baselineErrorChecking]} {;return;};variable ultraScaleDevices;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value $productDropDown];if {$productDropDownValue in $ultraScaleDevices} {;set_property value 96 ${PARAM_VALUE.DNA.WIDTH};} else {;set_property value 57 ${PARAM_VALUE.DNA.WIDTH};};};proc validate_PARAM_VALUE.DNA.WIDTH { PARAM_VALUE.DNA.WIDTH PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return true;};variable ultraScaleDevices;set productDropDownValue [get_property value ${PARAM_VALUE.BOARD}];set dnaWidth [get_property value ${PARAM_VALUE.DNA.WIDTH}];if {$productDropDownValue in $ultraScaleDevices && $dnaWidth != "96"} {;set_property errmsg "CONFIG.DNA.WIDTH is an internal parameter, do NOT edit this parameter. Detected board is an UltraScale Device, CONFIG.DNA.WIDTH must be set to 96" ${PARAM_VALUE.DNA.WIDTH};return false;} elseif {!($productDropDownValue in $ultraScaleDevices) && $dnaWidth != "57"} {;set_property errmsg "CONFIG.DNA.WIDTH is an internal parameter, do NOT edit this parameter. Detected board is a 7-Series Device, CONFIG.DNA.WIDTH must be set to 57" ${PARAM_VALUE.DNA.WIDTH};return false;};return true;};proc update_PARAM_VALUE.S.EN { PARAM_VALUE.S.EN PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return;};variable secondaryEnabledBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];if {!($productDropDownValue in $secondaryEnabledBoards)} {;set_property value false ${PARAM_VALUE.S.EN};};};proc validate_PARAM_VALUE.S.EN { PARAM_VALUE.S.EN PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return true;};variable secondaryEnabledBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];if {[get_property value ${PARAM_VALUE.S.EN}] == "true" && !($productDropDownValue in $secondaryEnabledBoards)} {;set_property errmsg "Secondary host interface is not supported on the $productDropDownValue." ${PARAM_VALUE.S.EN};return false;};return true;};proc update_PARAM_VALUE.BITSTREAM.FLASH { PARAM_VALUE.BITSTREAM.FLASH PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return;};variable supportedBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set isFlashSupported [lindex $boardContent 3];if {[get_property value ${PARAM_VALUE.BITSTREAM.FLASH}] == "true" && $isFlashSupported == "false"} {;set_property value false ${PARAM_VALUE.BITSTREAM.FLASH};};};proc validate_PARAM_VALUE.BITSTREAM.FLASH { PARAM_VALUE.BITSTREAM.FLASH PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return true;};variable supportedBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];set boardContent [dict get $supportedBoards $productDropDownValue];set isFlashSupported [lindex $boardContent 3];if {[get_property value ${PARAM_VALUE.BITSTREAM.FLASH}] == "true" && $isFlashSupported == "false"} {;set_property errmsg "Flash configuration is not supported on this board." ${PARAM_VALUE.BITSTREAM.FLASH};return false;};return true;};proc update_PARAM_VALUE.S.RB.EN { PARAM_VALUE.S.RB.EN PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return;};variable secondaryEnabledBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];if {[get_property value ${PARAM_VALUE.S.RB.EN}] == "true" && !($productDropDownValue in $secondaryEnabledBoards)} {;set_property value false ${PARAM_VALUE.S.RB.EN};};};proc validate_PARAM_VALUE.S.RB.EN { PARAM_VALUE.S.RB.EN PARAM_VALUE.BOARD } {;if {[baselineErrorChecking]} {;return true;};variable secondaryEnabledBoards;set productDropDown ${PARAM_VALUE.BOARD};set productDropDownValue [get_property value ${productDropDown}];if {[get_property value ${PARAM_VALUE.S.RB.EN}] == "true" && !($productDropDownValue in $secondaryEnabledBoards)} {;set_property errmsg "Secondary host interface is not supported on the $productDropDownValue." ${PARAM_VALUE.S.RB.EN};return false;};return true;};
