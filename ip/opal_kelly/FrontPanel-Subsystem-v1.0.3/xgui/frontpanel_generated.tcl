# ------------------------------------------------------------------------
# File: frontpanel_generated.tcl
#
# Do NOT modify this script.
#
# Copyright (c) 2022-2023 Opal Kelly Incorporated
# ------------------------------------------------------------------------
set procedure_address {;proc update_PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_<<Index>> { PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_<<Index>>  PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT } {        ;updateAddressParamIfUnused <<Type>> <<Index>> PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_<<Index>> PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT;};proc validate_PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_<<Index>> { PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT <<Args>> <<AdditionalArgs>> } {;updateStoredAddressTable <<ParamPrefix>><<Type>> <<Index>> PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_<<Index>>;<<ValidationFunction>> PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT <<ParamPrefix>><<Type>> <<Index>> <<Min>> <<Max>> <<Args>> <<OtherType>> <<AdditionalArgs>>;};};proc transform_Template {template Min Max ValidationFunction UpdateTableFunction Args AdditionalArgs type otherType ParamPrefix} {;set subValidationFunction [regsub -all "<<ValidationFunction>>" $template $ValidationFunction];set subUpdateTableFunction [regsub -all "<<UpdateTableFunction>>" $subValidationFunction $UpdateTableFunction];set subArgs [regsub -all "<<Args>>" $subUpdateTableFunction $Args];set subAdditionalArgs [regsub -all "<<AdditionalArgs>>" $subArgs $AdditionalArgs];set subParamPrefix [regsub -all "<<ParamPrefix>>" $subAdditionalArgs $ParamPrefix];set subType [regsub -all "<<Type>>" $subParamPrefix $type];set subOtherType [regsub -all "<<OtherType>>" $subType $otherType];set subMin [regsub -all "<<Min>>" $subOtherType $Min];set subMax [regsub -all "<<Max>>" $subMin $Max];return $subMax;};set paramPrefixes {"" S.};set addressArgs {};set addressOtherArgs {};set indexs {};for {set i 0} {$i < 32} {incr i} {;lappend addressArgs PARAM_VALUE.<<ParamPrefix>><<Type>>.ADDR_$i;lappend addressOtherArgs PARAM_VALUE.<<ParamPrefix>><<OtherType>>.ADDR_$i;lappend indexs $i;};foreach prefix $paramPrefixes {;foreach type $endpointTypes {;if {$type == "WI"} {;set Min 0x00;set Max 0x1f;set ValidationFunction "validateParam";set UpdateTableFunction "updateAddressTable";set Args $addressArgs;set AdditionalArgs "";set otherType "";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "WO"} {;set Min 0x20;set Max 0x3f;set ValidationFunction "validateParam";set UpdateTableFunction "updateAddressTable";set Args $addressArgs;set AdditionalArgs "";set otherType "";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "TI"} {;set Min 0x40;set Max 0x5f;set ValidationFunction "validateParam";set UpdateTableFunction "updateAddressTable";set Args $addressArgs;set AdditionalArgs "";set otherType "";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "TO"} {;set Min 0x60;set Max 0x7f;set ValidationFunction "validateParam";set UpdateTableFunction "updateAddressTable";set Args $addressArgs;set AdditionalArgs "";set otherType "";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "PI"} {;set Min 0x80;set Max 0x9f;set ValidationFunction "validatePipeParam";set UpdateTableFunction "updateAddressTableForPipes";set Args $addressArgs;set AdditionalArgs $addressOtherArgs;set otherType "BTPI";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "BTPI"} {;set Min 0x80;set Max 0x9f;set ValidationFunction "validatePipeParam";set UpdateTableFunction "updateAddressTableForPipes";set Args $addressArgs;set AdditionalArgs $addressOtherArgs;set otherType "PI";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "PO"} {;set Min 0xa0;set Max 0xbf;set ValidationFunction "validatePipeParam";set UpdateTableFunction "updateAddressTableForPipes";set Args $addressArgs;set AdditionalArgs $addressOtherArgs;set otherType "BTPO";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];} elseif {$type == "BTPO"} {;set Min 0xa0;set Max 0xbf;set ValidationFunction "validatePipeParam";set UpdateTableFunction "updateAddressTableForPipes";set Args $addressArgs;set AdditionalArgs $addressOtherArgs;set otherType "PO";set partialTransform [transform_Template $procedure_address $Min $Max $ValidationFunction $UpdateTableFunction $Args $AdditionalArgs $type $otherType $prefix];};foreach j $indexs {;set subIndex [regsub -all "<<Index>>" $partialTransform $j];uplevel 0 $subIndex;};};};set procedure_count {  ;proc update_PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT { PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT } {;secondaryCountBackToDefault PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT "<<ParamPrefix>>";};proc validate_PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT { PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT <<Args>> } {;<<ValidateLogic>>;};proc update_gui_for_PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT {IPINST PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT} {;updateTableDynamically IPINST PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT <<ParamPrefix>><<Type>>;};};foreach prefix $paramPrefixes {;foreach type $endpointTypes {;if {($type == "PI") || ($type == "BTPI") || ($type == "PO") || ($type == "BTPO")} {;set Args PARAM_VALUE.<<ParamPrefix>><<OtherType>>.COUNT;set ValidateLogic {validatePipeRange PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT PARAM_VALUE.<<ParamPrefix>><<OtherType>>.COUNT <<ParamPrefix>><<Type>>};} else {;set Args "";set ValidateLogic {validateRange PARAM_VALUE.BOARD PARAM_VALUE.<<ParamPrefix>><<Type>>.COUNT <<ParamPrefix>><<Type>>};};if {$type == "PI"} {;set otherType BTPI;} elseif {$type == "BTPI"} {;set otherType PI;} elseif {$type == "PO"} {;set otherType BTPO;} elseif {$type == "BTPO"} {;set otherType PO;};set subValidateLogic [regsub -all "<<ValidateLogic>>" $procedure_count $ValidateLogic];set subArgs [regsub -all "<<Args>>" $subValidateLogic $Args];set subParamPrefix [regsub -all "<<ParamPrefix>>" $subArgs $prefix];set subType [regsub -all "<<Type>>" $subParamPrefix $type];set subOtherType [regsub -all "<<OtherType>>" $subType $otherType];uplevel 0 $subOtherType;};};
